'''
给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。

具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被计为是不同的子串。

示例 1:

输入: "abc"
输出: 3
解释: 三个回文子串: "a", "b", "c".
示例 2:

输入: "aaa"
输出: 6
说明: 6个回文子串: "a", "a", "a", "aa", "aa", "aaa".
注意:

输入的字符串长度不会超过1000。
'''

#一：超级暴力解法 
def countSubstrings1(s: str) -> int:
        count = 0
        for i in range(len(s)):
            for j in range(len(s)-i): #遍历全部
                if s[i:i+j+1] == s[i:i+j+1][::-1]: 
                    count +=1
        return count
        
#通过	924 ms	13.2 MB	python3


#二：回文都是从中心往两边扩散的，先固定指针，不行就扩散
#从回文长度是偶数或者奇数来
def countSubstrings2(s: str) -> int:
        count = 0
        for i in range(len(s)):
            count += 1 #单独的字母也是一个回文
            l = i-1    #向左扩散
            r = i+1    #向右扩散
            while l>=0 and r<len(s) and s[l]==s[r]:   #在奇数个字符中
                count +=1
                l = l-1                               #向左扩散
                r = r+1                               #向右扩散 
            l = i                                     #如果不满足则结束
            r = i+1                                   #换为偶数个字符继续检查
            while l>=0 and r<len(s) and s[l]==s[r]:   #在偶数个字符中
                count +=1
                l = l-1
                r = r+1
        return count
        
#通过	176 ms	13.2 MB	python3

#一个更优化的解法：
def countSubstrings(s):
        """
        :type s: str
        :rtype: int
        """ 
        n = len(s)
        i = j = res = 0
        while i < n:
            while j < n and s[i] == s[j]:
                j += 1
            res += (1 + j - i) * (j - i) // 2
            l, r = i - 1, j
            while l >= 0 and r < n and s[l] == s[r]:
                res += 1
                l -= 1
                r += 1
            i = j
        return res
        
#通过	56 ms	13.1 MB	python3
        
        
#三：动态规划
‘’‘
动态规划的思想是，我们先确定所有的回文，即 string[start:end]是回文. 当我们要确定string[i:j] 是不是回文的时候，要确定：

string[i] 等于 string[j]吗?
string[i+1:j-1]是回文吗?
单个字符是回文；
两个连续字符如果相等是回文；
如果有3个以上的字符，需要两头相等并且去掉首尾之后依然是回文。



