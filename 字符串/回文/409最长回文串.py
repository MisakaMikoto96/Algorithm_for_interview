# _*_ coding: utf-8 _*_

'''
给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。

在构造过程中，请注意区分大小写。比如 "Aa" 不能当做一个回文字符串。

注意:
假设字符串的长度不会超过 1010。

示例 1:

输入:
"abccccdd"

输出:
7

解释:
我们可以构造的最长的回文串是"dccaccd", 它的长度是 7。
'''

def longestPalindrome(s: str) -> int:
        '''
        只需要求解子串长度
        
        【笔记】
        核心思想，计算数字成对出现的字母数量。
        回文字符串的特点是：中心对称，最中心要么为奇数个单位的字符串，要么为偶数。
        如果出现了奇数个数的字符，先统计偶数对，再加1。
        '''
        result = 0 #空盒
        k = 0 #空flag
        str=set(s) #先统计字符串里出现过多少种字符
        for chara in str:
          num = s.count(chara) #统计字符串中各种字母的数目
          if num % 2 == 0: #如果数目为偶数
            result += num
          else: #如果数目为奇数
            result += num -1 # 可以凑成的最多偶数对回文
            k = 1 #最后加上一个奇数flag（放在中心）
        return k + result
        
        
        
# 56ms 内存消耗13.2mb            
        
